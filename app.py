from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, Update, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import threading
import json
import random
import logging
import asyncio

# Configura√ß√£o do Flask
app = Flask(__name__)
CORS(app)

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Dicion√°rios para armazenar os dados
referral_counts = {}
referrals = {}
used_referrals = {}
ad_counts = {}

# Configura√ß√£o do Application
application = Application.builder().token('7707517421:AAGMYveOkr8gOgGKLOw8TFvSEsuLjtlJS3k').build()

# Configura√ß√£o do banco de dados SQLite
def setup_db():
    conn = sqlite3.connect('saldos.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                     id INTEGER PRIMARY KEY,
                     saldo REAL DEFAULT 0.0
                 )''')
    conn.commit()
    conn.close()

# Fun√ß√£o para adicionar um novo usu√°rio ao banco de dados
def add_user(user_id):
    conn = sqlite3.connect('saldos.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO users (id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

# Fun√ß√£o para atualizar o saldo de um usu√°rio
def update_balance(user_id, amount):
    conn = sqlite3.connect('saldos.db')
    c = conn.cursor()
    c.execute('UPDATE users SET saldo = saldo + ? WHERE id = ?', (amount, user_id))
    conn.commit()
    conn.close()

# Fun√ß√£o para obter o saldo de um usu√°rio
def get_balance(user_id):
    conn = sqlite3.connect('saldos.db')
    c = conn.cursor()
    c.execute('SELECT saldo FROM users WHERE id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 0.0

# Fun√ß√£o para formatar valor monet√°rio
def format_currency(value):
    return f'R$ {value:.2f}'.replace('.', ',')

# Fun√ß√£o para adicionar saldo a um usu√°rio pelo administrador
async def add_saldo(update: Update, context: CallbackContext):
    if update.message.from_user.id != 1437993955:
        await update.message.reply_text("Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    try:
        user_id = int(context.args[0])
        amount = float(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("Uso: /add_saldo <user_id> <amount>")
        return

    add_user(user_id)
    update_balance(user_id, amount)
    await update.message.reply_text(f"Saldo de {format_currency(amount)} adicionado ao usu√°rio {user_id}.")

# Fun√ß√£o para iniciar o menu com bot√µes inline
async def menu_bot(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    add_user(user_id)  # Adicionar usu√°rio ao banco de dados
    message_text = (
        f'Ol√° {user_name}, seja bem-vindo ao AD PLAYY APP!\n'
    )
    image_url = 'https://www.bing.com/images/create/python2c-bot2c-and-telegram/1-66c3500df3d044319734bfed00a995e1?id=GIu3w%2BdeCA5t934ZF2Q8Ww.N9isGUKWkWp7MjIdcyBKUA&view=detailv2&idpp=genimg&idpclose=1&thid=OIG3.BEU6uVgYA.RQcu.T4QVz&skey=aK4prDKbfdHzR-38wpcRfT1Y_k5oV9fe1YATfQ8vYW8&form=SYDBIC&ssp=1&darkschemeovr=1&setlang=pt-br&cc=BR&safesearch=moderate'  # URL da imagem
    
    # Configura√ß√£o dos bot√µes inline com 'üëæ Painel Ad Pay App'
    keyboard_inline = [
        [InlineKeyboardButton("üëæ Painel Ad Pay App", callback_data='painel_ad_pay_app')]
    ]
    reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)

    # Envio da mensagem com a imagem e os bot√µes inline
    await update.message.reply_photo(photo=image_url, caption=message_text, reply_markup=reply_markup_inline)

# Fun√ß√£o para iniciar o teclado customizado (Reply Keyboard)
async def menu_customizado(update: Update, context: CallbackContext):
    # Configura√ß√£o do teclado customizado com '‚ñ∂Ô∏è Assistir an√∫ncios' centralizado e os outros bot√µes na linha abaixo
    keyboard_customizado = [
        ['‚ñ∂Ô∏è Assistir an√∫ncios'],  # Primeira linha com o bot√£o centralizado
        ['üìã Menu do Bot', 'ü§ù Afiliados', 'üë• Indica√ß√£o'],  # Segunda linha com os outros bot√µes
        ['‚öôÔ∏è Outros', 'üí∞ Saldo']  # Terceira linha com os demais bot√µes
    ]
    reply_markup_customizado = ReplyKeyboardMarkup(keyboard_customizado, resize_keyboard=True)

    # Envio da mensagem com o teclado customizado
    await update.message.reply_text('Selecione uma op√ß√£o:', reply_markup=reply_markup_customizado)

# Fun√ß√£o para lidar com as a√ß√µes dos bot√µes inline
async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # Tratar cada bot√£o inline clicado
    if query.data == 'assistir_anuncios':
        message_text = "üìä Taxa de pagamento atual: R$ 0,12 a R$ 0,28 por an√∫ncio\n\nClique no bot√£o abaixo para come√ßar a assistir aos an√∫ncios\nüëáüèΩ"
        keyboard_inline = [
            [InlineKeyboardButton("Assistir An√∫ncios", web_app=WebAppInfo(url=f'https://6693139e7ba079b061336837--chimerical-melomakarona-c9aafc.netlify.app/?user_id={query.from_user.id}'))]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup_inline)
    elif query.data == 'afiliados':
        message_text = "ü§ùOl√°, esses aqui s√£o os afiliados do bot, que nos ajudam a mant√™-lo funcionando corretamente:\n\n" \
                       "Acesse [este link](https://1wfwna.life/?open=register&p=1zhf) para realizar um r√°pido cadastro.\n" \
                       "Adicione este *CODIGO 6363834* ao entrar no site.\n" \
                       "Efetue um dep√≥sito no valor m√≠nimo e fa√ßa qualquer aposta.\n" \
                       "N√≥s comprove no atendimeento FAQ, que adicionamos o *DOBRO* de saldo via Telegram.\n"

        image_url = 'https://static-pp.1win-cdn.com/promo-files-uploads/jjCDSvsC_2-mqwPC4YimbPjtB0-YxwVxDr6KX9OxdWOZNf76Da_vkTlVdoEua1l8lOFv4Yge6DFASGEm1N5hHQ0iImmRj-fuw8Vt.jpg'  # URL da imagem

        await query.message.reply_photo(photo=image_url, caption=message_text, parse_mode='Markdown')
    elif query.data == 'outros':
        ad_count = ad_counts.get(query.from_user.id, 0)
        message_text = f"‚öôÔ∏è Outros\n\n" \
                       f"üë• Total de usu√°rios: 9291\n" \
                       f"üëÄ Voc√™ assistiu a {ad_count} an√∫ncios\n" \
                       f"üíµ Total de fundos retirados: R$ 0"
        
        keyboard_inline = [
            [InlineKeyboardButton("üí∞ Hist√≥rico de Saques", callback_data='historico_saques')],
            [InlineKeyboardButton("üì£ Not√≠cias", callback_data='noticias')],
            [InlineKeyboardButton("üì® FAQ", callback_data='faq')],
            [InlineKeyboardButton("üí¨ Suporte", callback_data='suporte')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup_inline)
    elif query.data == 'historico_saques':
        message_text = "üí∞ Hist√≥rico de Saques\n\n" \
                       "N√£o h√° nada\n" \
                       "Voc√™ ainda n√£o tem nenhuma opera√ß√£o para exibir."
        keyboard_inline = [
            [InlineKeyboardButton("üì£ Not√≠cias", callback_data='noticias')],
            [InlineKeyboardButton("üì® FAQ", callback_data='faq')],
            [InlineKeyboardButton("üí¨ Suporte", callback_data='suporte')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup_inline)
    elif query.data == 'noticias':
        await query.edit_message_text(text="Boa tarde!\n\n"
                                           "‚ùå Estamos enfrentando problemas com o hosting que, por sua vez, afetaram o banco de dados, resultando em falhas no funcionamento do bot.\n\n"
                                           "üîπA carga de v√≠deos foi completamente corrigida, incluindo a velocidade de upload\n"
                                           "üîπO sistema de refer√™ncia foi restaurado (os valores das recompensas est√£o sendo creditados corretamente)\n"
                                           "üîπOs saldos de alguns usu√°rios foram recalculados e corrigidos (foram encontrados erros)\n\n" 
                                           "Obrigado pela compreens√£o!")
    elif query.data == 'faq':
        message_text = (
            "1Ô∏è‚É£ O que √© o EstrelaClip App?\n"
            "EstrelaClip App √© um bot atrav√©s do qual voc√™ pode assistir a an√∫ncios e ganhar recompensas em dinheiro.\n\n"
            "2Ô∏è‚É£ Como eu ganho dinheiro usando o EstrelaClip App?\n"
            "Voc√™ assiste aos an√∫ncios, n√≥s recebemos dinheiro dos anunciantes e compartilhamos com voc√™.\n\n"
            "3Ô∏è‚É£ Qual √© a taxa de pagamento atual?\n"
            "A taxa de pagamento atual √© de R$ 0,12 a R$ 0,28 por an√∫ncio assistido.\n\n"
            "4Ô∏è‚É£ Quanto eu posso ganhar?\n"
            "Sua renda depende da quantidade de an√∫ncios assistidos e de refer√™ncias convidadas.\n\n"
            "5Ô∏è‚É£ Como funciona o programa de indica√ß√£o?\n"
            "Ao convidar novos usu√°rios para o EstrelaClip App atrav√©s do seu link de indica√ß√£o, voc√™ ganha R$ 1,00 por cada novo usu√°rio e 5% de cada an√∫ncio que eles assistirem.\n\n"
            "6Ô∏è‚É£ Como posso retirar meu dinheiro?\n"
            "Voc√™ pode retirar seu dinheiro seguindo as instru√ß√µes na se√ß√£o 'Saldo'. Valor m√≠nimo para retirada: R$ 30,00\n\n"
            "7Ô∏è‚É£ M√©todos de retirada de fundos?\n"
            "Pix, bancos brasileiros, Perfect Money, criptomoeda.\n\n"
            "8Ô∏è‚É£ O EstrelaClip App √© seguro?\n"
            "Sim, o EstrelaClip App segue todas as diretrizes de seguran√ßa para proteger seus dados e suas transa√ß√µes.\n\n"
            "Se voc√™ tiver mais perguntas, entre em contato com nosso suporte ao cliente."
        )
        await query.edit_message_text(text=message_text)
    elif query.data == 'suporte':
        message_text = (
            "üí¨Para d√∫vidas relacionadas ao bot acesse https://t.me/AtendimentodepagamentoAdPlayApp - Seg a Sex das 9:00 as 17:00\n"
            "ou\n"
            "üí¨Para Atendimento relacionado ao Saque acesse https://t.me/lcs2683 - Ter a Sex das 9:00 as 17:00 üí∏"
        )
        await query.edit_message_text(text=message_text)
    elif query.data == 'painel_ad_pay_app':
        # Aqui chamamos o comando /menu
        await menu_customizado(query, context)
    elif query.data == 'retirada_fundos':
        user_id = query.from_user.id
        saldo = get_balance(user_id)
        
        if (saldo < 30):
            await query.edit_message_text("‚ùåValor m√≠nimo de saque √© de R$30,00‚ùå")
            return
        
        message_text = "üí∞ Selecione o m√©todo de retirada:"
        keyboard_inline = [
            [InlineKeyboardButton("Pix", callback_data='retirada_pix')],
            [InlineKeyboardButton("Bancos Brasileiros", callback_data='retirada_bancos')],
            [InlineKeyboardButton("Perfect Money", callback_data='retirada_pm')],
            [InlineKeyboardButton("Criptomoeda", callback_data='retirada_crypto')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup_inline)
    elif query.data in ['retirada_pix', 'retirada_bancos', 'retirada_pm', 'retirada_crypto']:
        message_text = (
            "ü§ùIndique 10 amigos / Amigos indicados:0\n"
            "(Prazo de at√© 48 horas ap√≥s a solicita√ß√£o) - V√°lido somente ao primeiro saque.\n\n"
            "Ou\n\n"
            "üí∞Efetue o pagamento da taxa transfer√™ncia rotacional no valor de R$ 5,00.\n"
            "(Prazo de at√© 12 horas ap√≥s o pagamento)\n\n"
            "Saque m√≠nimo: R$ 30,00\n"
            "Saque m√°ximo: R$ 300,00 (Por saque)"
        )
        keyboard_inline = [
            [InlineKeyboardButton("ü§ùSaque por Indica√ß√£o", callback_data='saque_indicacao')],
            [InlineKeyboardButton("üí∞Saque via pagamento", callback_data='saque_pagamento')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup_inline)
    elif query.data == 'saque_indicacao':
        message_text = "ü§ùN√∫mero de indica√ß√£o insuficiente - Gere seu link no menu de indica√ß√£o e indique 10 amigos para efetuar o saque."
        await query.edit_message_text(text=message_text)
    elif query.data == 'saque_pagamento':
        message_text = (
            "üí∞PIX CHAVE ALEAT√ìRIAüëá\n\n"
            "b7facb16-1aa5-4da3-890e-53cca52a7dbd\n\n"
            "Dono do Bot: Pedro Henrique Costa Sousa\n\n"
            "Ap√≥s efetuar o pagamento envie em https://t.me/AtendimentodepagamentoAdPlayApp o seguinte formul√°rio:\n\n"
            "Comprovante de pagamento: (Print)\n"
            "Nome completo:\n"
            "Valor de saque:\n"
            "Forma de pagamento desejado:\n\n"
            "Ap√≥s aguarde seu Ticket de Atendimento."
        )
        await query.edit_message_text(text=message_text)

# Fun√ß√£o para listar usu√°rios e mostrar saldo
async def listar_usuarios(update: Update, context: CallbackContext):
    if update.message.from_user.id != 1437993955:
        await update.message.reply_text("Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    conn = sqlite3.connect('saldos.db')
    c = conn.cursor()
    c.execute('SELECT id FROM users')
    users = c.fetchall()
    conn.close()

    if not users:
        await update.message.reply_text("Nenhum usu√°rio encontrado.")
        return

    keyboard = [[InlineKeyboardButton(str(user[0]), callback_data=f'show_balance_{user[0]}')] for user in users]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Selecione um usu√°rio para ver o saldo:", reply_markup=reply_markup)

async def show_balance(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[2])
    balance = get_balance(user_id)
    await query.edit_message_text(f"O saldo do usu√°rio {user_id} √©: {format_currency(balance)}")

# Fun√ß√£o para enviar b√¥nus di√°rio para todos os usu√°rios
async def send_bonus_diario(update: Update, context: CallbackContext):
    if update.message.from_user.id != 1437993955:
        await update.message.reply_text("Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    conn = sqlite3.connect('saldos.db')
    c = conn.cursor()
    c.execute('SELECT id FROM users')
    users = c.fetchall()
    conn.close()

    if not users:
        await update.message.reply_text("Nenhum usu√°rio encontrado.")
        return

    for user in users:
        user_id = user[0]
        message_text = "‚ù§Ô∏è Aqui est√° seu b√¥nus di√°rio no valor de R$ 1,00"
        keyboard_inline = [
            [InlineKeyboardButton("‚ù§Ô∏è Coletar", callback_data=f'coletar_bonus_{user_id}')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await context.bot.send_message(chat_id=user_id, text=message_text, reply_markup=reply_markup_inline)

async def coletar_bonus(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[2])
    
    # Atualiza o saldo do usu√°rio
    update_balance(user_id, 1.00)
    
    # Remove as mensagens anteriores
    await query.message.delete()
    
    # Envia mensagem de confirma√ß√£o
    await context.bot.send_message(chat_id=user_id, text="‚ù§Ô∏è Valor de R$ 1,00 adicionado com sucesso")

# Fun√ß√£o para lidar com o menu customizado
async def handle_custom_menu(update: Update, context: CallbackContext):
    if update.message.text == 'üìã Menu do Bot':
        await menu_bot(update, context)
    elif update.message.text == '‚ñ∂Ô∏è Assistir an√∫ncios':
        message_text = "üìä Taxa de pagamento atual: R$ 0,12 a R$ 0,28 por an√∫ncio\n\nClique no bot√£o abaixo para come√ßar a assistir aos an√∫ncios\nüëáüèΩ"
        keyboard_inline = [
            [InlineKeyboardButton("Assistir An√∫ncios", web_app=WebAppInfo(url=f'https://6693139e7ba079b061336837--chimerical-melomakarona-c9aafc.netlify.app/?user_id={update.message.from_user.id}'))]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await update.message.reply_text(text=message_text, reply_markup=reply_markup_inline)
    elif update.message.text == 'ü§ù Afiliados':
        message_text = "ü§ùOl√°, esses aqui s√£o os afiliados do bot, que nos ajudam a mant√™-lo funcionando corretamente:\n\n" \
                       "Acesse [este link](https://1wfwna.life/?open=register&p=1zhf) para realizar um r√°pido cadastro.\n" \
                       "Adicione este codigo 6363834 ao entrar no site.\n" \
                       "Efetue um dep√≥sito no valor m√≠nimo e fa√ßa qualquer aposta.\n" \
                       "N√≥s comprove no atendimeento FAQ, que adicionamos o dobro de saldo via Telegram.\n"

        image_url = 'https://static-pp.1win-cdn.com/promo-files-uploads/jjCDSvsC_2-mqwPC4YimbPjtB0-YxwVxDr6KX9OxdWOZNf76Da_vkTlVdoEua1l8lOFv4Yge6DFASGEm1N5hHQ0iImmRj-fuw8Vt.jpg'  # URL da imagem

        await update.message.reply_photo(photo=image_url, caption=message_text, parse_mode='Markdown')
    elif update.message.text == 'üë• Indica√ß√£o':
        referral_link = generate_referral_link(update.message.from_user.id)  # Gera um link de indica√ß√£o exclusivo para o usu√°rio
        referral_count = referral_counts.get(update.message.from_user.id, 0)  # Obt√©m o n√∫mero de pessoas que usaram o link do usu√°rio
        message_text = f"üë• Indica√ß√£o\n\n" \
                       f"Convide seus amigos para usar o bot e ganhe R$ 1,00 por cada novo usu√°rio que se cadastrar!\n\n" \
                       f"Seu link de indica√ß√£o √©: {referral_link}\n\n" \
                       f"At√© agora, {referral_count} pessoas se cadastraram usando o seu link."
        
        await update.message.reply_text(text=message_text)
    elif update.message.text == '‚öôÔ∏è Outros':
        ad_count = ad_counts.get(update.message.from_user.id, 0)
        message_text = f"‚öôÔ∏è Outros\n\n" \
                       f"üë• Total de usu√°rios: 92913\n" \
                       f"üëÄ Voc√™ assistiu a {ad_count} an√∫ncios\n" \
                       f"üíµ Total de fundos retirados: R$ 0"
        keyboard_inline = [
            [InlineKeyboardButton("üí∞ Hist√≥rico de Saques", callback_data='historico_saques')],
            [InlineKeyboardButton("üì£ Not√≠cias", callback_data='noticias')],
            [InlineKeyboardButton("üì® FAQ", callback_data='faq')],
            [InlineKeyboardButton("üí¨ Suporte", callback_data='suporte')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await update.message.reply_text(text=message_text, reply_markup=reply_markup_inline)
    elif update.message.text == 'üí∞ Saldo':
        user_id = update.message.from_user.id
        saldo = get_balance(user_id)  # Obter saldo do banco de dados
        message_text = f"üí∞ Seu saldo atual √©: {format_currency(saldo)}"
        keyboard_inline = [
            [InlineKeyboardButton("üí∞ Retirada dos fundos", callback_data='retirada_fundos')]
        ]
        reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
        await update.message.reply_text(text=message_text, reply_markup=reply_markup_inline)

# Fun√ß√£o para gerar links de indica√ß√£o √∫nicos
def generate_referral_link(user_id):
    return f'https://t.me/AdPlayy_bot?start={user_id}'

# Fun√ß√£o para lidar com novos usu√°rios que entram pelo link de indica√ß√£o
async def handle_new_user_via_referral(update: Update, context: CallbackContext):
    args = context.args
    if args:
        referrer_id = int(args[0])
        new_user_id = update.message.from_user.id

        if new_user_id == referrer_id:
            await update.message.reply_text("Voc√™ n√£o pode usar seu pr√≥prio link de indica√ß√£o.")
            return

        if new_user_id in used_referrals:
            await update.message.reply_text("Voc√™ j√° utilizou um link de indica√ß√£o anteriormente.")
            return

        if new_user_id not in referrals:
            referrals[new_user_id] = referrer_id
            referral_counts[referrer_id] = referral_counts.get(referrer_id, 0) + 1

            update_balance(referrer_id, 1.00)  # Adiciona R$ 1,00 ao saldo do referenciador
            used_referrals[new_user_id] = True

            await update.message.reply_text('Obrigado por se cadastrar! Seu referenciador foi recompensado.')
            await context.bot.send_message(chat_id=referrer_id, text="Voc√™ Ganhou R$ 1,00 Por Indicar Uma Pessoa ‚ù§Ô∏è")
        else:
            await update.message.reply_text('Voc√™ j√° foi registrado anteriormente.')
    else:
        await update.message.reply_text('Bem-vindo!')

# Fun√ß√£o para enviar a mensagem de recompensa antes do v√≠deo terminar
async def send_reward_message(user_id):
    reward_amount = random.choice([0.12, 0.15, 0.22, 0.25, 0.27])
    update_balance(user_id, reward_amount)
    message_text = f"Voc√™ ganhou {format_currency(reward_amount)} por assistir ao an√∫ncio."

    # Incrementar contagem de an√∫ncios assistidos
    if user_id in ad_counts:
        ad_counts[user_id] += 1
    else:
        ad_counts[user_id] = 1

    keyboard_inline = [
        [InlineKeyboardButton("Continuar assistindo aos an√∫ncios", web_app=WebAppInfo(url=f'https://6693139e7ba079b061336837--chimerical-melomakarona-c9aafc.netlify.app/?user_id={user_id}'))]
    ]
    reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)

    await application.bot.send_message(chat_id=user_id, text=message_text, reply_markup=reply_markup_inline)

# Fun√ß√£o para o comando /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    # Verificar se h√° dados de refer√™ncia
    if context.args:
        referrer_id = int(context.args[0])
        if referrer_id in referral_counts:
            referral_counts[referrer_id] += 1
        else:
            referral_counts[referrer_id] = 1

        referrals[user_id] = referrer_id  # Adicionar refer√™ncia do usu√°rio atual

    add_user(user_id)  # Adicionar usu√°rio ao banco de dados

    # Exibir o menu_bot inicial
    await menu_bot(update, context)

# Iniciar o Flask em uma thread separada
def run_flask():
    @app.route('/reward', methods=['POST'])
    def reward_user():
        try:
            data = request.json
            user_id = data['user_id']
            logger.info(f'Recebido pedido de recompensa para user_id: {user_id}')

            # Cria uma nova thread para rodar o loop do asyncio
            def run_send_reward_message():
                asyncio.run(send_reward_message(user_id))

            threading.Thread(target=run_send_reward_message).start()
            return jsonify({'status': 'success'})
        except Exception as e:
            logger.error(f'Erro ao processar o pedido de recompensa: {e}')
            return jsonify({'status': 'error', 'message': str(e)})

    app.run(host='0.0.0.0', port=5000)

# Adicionar os handlers de comando e mensagem
application.add_handler(CommandHandler('start', start))
application.add_handler(CommandHandler('menu', menu_customizado))
application.add_handler(CommandHandler('add_saldo', add_saldo))  # Adicionar o comando /add_saldo
application.add_handler(CommandHandler('listar_usuarios', listar_usuarios))  # Comando para listar usu√°rios
application.add_handler(CommandHandler('send_bonus_diario', send_bonus_diario))  # Comando para enviar b√¥nus di√°rio
application.add_handler(CallbackQueryHandler(button_click))
application.add_handler(CallbackQueryHandler(show_balance, pattern=r'^show_balance_'))
application.add_handler(CallbackQueryHandler(coletar_bonus, pattern=r'^coletar_bonus_'))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_menu))

# Configurar o banco de dados
setup_db()

# Iniciar o Flask em uma thread separada
threading.Thread(target=run_flask).start()

# Iniciar o bot
application.run_polling()
